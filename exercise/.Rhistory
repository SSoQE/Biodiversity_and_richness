library (terra)
library(rasterVis)
library(dplyr)
mamm <- read.delim("mammal_data.txt")
library (terra)
library(rasterVis)
library(dplyr)
mamm <- read.delim("mammal_data.txt")
blank <- terra::rast("C:\\DATA GIS\\bioclim data\\bio01_1degr.asc")
levelplot(blank, par.settings=magmaTheme, contour=F,margin=F)
summary (mamm)
blank[] <- mamm$sprich
levelplot(blank, par.settings=magmaTheme, contour=F,margin=F, main="species richness of mammals")
plot (sprich ~ latit, mamm, pch = 19, col = "darkblue", cex = 0.25)
abline (v=0, lwd=2)
plot (sprich ~ abs(latit), mamm, pch = 19, col = "darkred", cex = 0.25)
# Fit three alternative richness–environment models on your data
#### Remove NAs and zeros, which is needed for the log-transformations
dat <- mamm %>%
select(sprich, temp, npp) %>%
filter(is.finite(sprich), is.finite(temp), is.finite(npp)) %>%
mutate(
sprich = as.numeric(sprich),
temp   = as.numeric(temp),
npp    = as.numeric(npp)
)
### For log models, we further need strictly positive values
dat_log <- dat %>% filter(sprich > 0, npp > 0)
# Optional: scale NPP so the saturating nls is numerically stable
dat_sat <- dat %>%
mutate(npp_s = npp / max(npp, na.rm = TRUE))
### (A) Kinetic theory
###     log(S) ~ Temperature
###     semi-log relationship
m_exp <- lm(log(sprich) ~ temp, data = dat_log)
### (B) Metabolic theory
###     log(S) ~ log(NPP)
###     power law log-log relationship
m_pow <- lm(log(sprich) ~ log(npp), data = dat_log)
### (C) Energy theory
###     S = Smax * (1 - exp(-b * NPP_scaled))
###     Michaelis–Menten-like saturating relationship
# Provide simple starting values; increase maxiter if needed
m_sat <- nls(
sprich ~ Smax * (1 - exp(-b * npp_s)),  ### specify the equation to be fitted
data   = dat_sat,
start  = list(Smax = max(dat_sat$sprich, na.rm = TRUE) * 1.05, b = 2), ### specify starting values for the optimization procedure
control = list(maxiter = 200, warnOnly = TRUE) ### setup for the optimization
)
### OUTPUT
summary(m_exp)
summary(m_pow)
summary(m_sat)
### COMPARE THE AIC VALUES
AIC(m_exp); AIC(m_pow); AIC(m_sat)
### CALCULATE AKAIKE'S WEIGHTS
aic_exp <-  AIC(m_exp)
aic_pow <-  AIC(m_pow)
aic_sat <- AIC(m_sat)
# Put into a data frame
aic_df <- data.frame(
model = c("Exponential (Temp)", "Power law (NPP)", "Saturating (NPP)"),
AIC   = c(aic_exp, aic_pow, aic_sat)
)
# Compute ΔAIC
aic_df$delta <- aic_df$AIC - min(aic_df$AIC)
# Compute Akaike weights
aic_df$weight <- exp(-0.5 * aic_df$delta)
aic_df$weight <- aic_df$weight / sum(aic_df$weight)
print(aic_df)
# barplot of the weights
library(ggplot2)
ggplot(aic_df, aes(x = reorder(model, -weight), y = weight, fill = model)) +
geom_col() +
labs(x = "Model", y = "Akaike weight", title = "Model support (AIC weights)") +
theme_minimal() +
theme(legend.position = "none")
### PLOT THE PREDICTIONS TO COMPARE THE MODELS
library(ggplot2)
library(patchwork)   # install.packages(patchwork, ggplot2) if needed
# 1) Compute R² for each model
# For linear models, we can use summary()
r2_exp <- summary(m_exp)$r.squared
r2_pow <- summary(m_pow)$r.squared
# For nls, compute pseudo-R² = 1 - SSE/SST
sse <- sum(residuals(m_sat)^2)
sst <- sum((dat_sat$sprich - mean(dat_sat$sprich))^2)
r2_sat <- 1 - sse/sst
# 2) Generate predicted curves as before
new_temp <- data.frame(temp = seq(min(dat_log$temp), max(dat_log$temp), length.out = 200))
pred_exp_curve <- data.frame(
temp = new_temp$temp,
sprich_pred = exp(predict(m_exp, newdata = new_temp))
)
new_npp <- data.frame(npp = seq(min(dat_log$npp), max(dat_log$npp), length.out = 200))
pred_pow_curve <- data.frame(
npp = new_npp$npp,
sprich_pred = exp(predict(m_pow, newdata = new_npp))
)
new_npp_sat <- data.frame(npp_s = seq(min(dat_sat$npp_s), max(dat_sat$npp_s), length.out = 200))
pred_sat_curve <- data.frame(
npp_s = new_npp_sat$npp_s,
npp   = new_npp_sat$npp_s * max(dat$npp, na.rm = TRUE),
sprich_pred = predict(m_sat, newdata = new_npp_sat)
)
# 3) Build ggplots with R² annotation
p_exp <- ggplot(dat_log, aes(x = temp, y = sprich)) +
geom_point(alpha = 0.4) +
geom_line(data = pred_exp_curve, aes(x = temp, y = sprich_pred),
color = "blue", linewidth = 1) +
annotate("text", x = Inf, y = Inf,
label = paste0("R² = ", round(r2_exp, 3)),
hjust = 1.1, vjust = 2, size = 4) +
labs(x = "Temperature (°C)", y = "Richness", title = "Kinetic / Exponential")
p_pow <- ggplot(dat_log, aes(x = npp, y = sprich)) +
geom_point(alpha = 0.4) +
geom_line(data = pred_pow_curve, aes(x = npp, y = sprich_pred),
color = "red", linewidth = 1) +
annotate("text", x = Inf, y = Inf,
label = paste0("R² = ", round(r2_pow, 3)),
hjust = 1.1, vjust = 2, size = 4) +
labs(x = "NPP", y = "Richness", title = "Metabolic Power-law")
p_sat <- ggplot(dat_sat, aes(x = npp, y = sprich)) +
geom_point(alpha = 0.4) +
geom_line(data = pred_sat_curve, aes(x = npp, y = sprich_pred),
color = "darkgreen", linewidth = 1) +
annotate("text", x = Inf, y = Inf,
label = paste0("R² = ", round(r2_sat, 3)),
hjust = 1.1, vjust = 2, size = 4) +
labs(x = "NPP", y = "Richness", title = "Energy-limitation / Saturating")
# 4) Combine plots side by side
(p_exp | p_pow | p_sat)
